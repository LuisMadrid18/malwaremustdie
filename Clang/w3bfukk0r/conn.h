/*
 * (C)opyright 2006 Nico Golde <nico@ngolde.de>
 * (C)opyright 2006 Andreas Krennmair <ak@synflood.at>
 * See LICENSE file for license details
 */

#ifndef CONN_H
#define CONN_H

#include <stdint.h>
#include <sys/types.h>

enum { 
	CONN_PLAIN = 0, /**< constant for a plain TCP connection */
	CONN_SSL /**< constant for an SSL connection */
};

/**
 * \struct conn_t
 * \brief a connection structure
 *
 * A connection contains type information and the necessary descriptors
 * and handles to send and receive data with functions such as
 * conn_read(), conn_write and conn_readline(). It can only be created
 * with connect_plain(), connect_ssl() or connect_ssl_proxy().
 */
typedef struct {
	/**
	 * The connection type, e.g. CONN_PLAIN or CONN_SSL.
	 */
	unsigned short type;

	/**
	 * The connection file descriptor.
	 */
	int fd;

	/**
	 * An optional connection handle. Must be NULL for plain
	 * connections. Currently used to hold a reference to an SSL
	 * handle for SSL connections.
	 */
	void * hndl;
} conn_t;

/**
 * Opens a plain TCP connection to a certain port on an IP host
 * @param ip the host to connect to (IP address or hostname)
 * @param port the TCP port to connect to
 */
conn_t * connect_plain(char * ip, uint16_t port);

/**
 * Opens an SSL connection.
 * @param ip the address (IP or hostname) to connect to
 * @param port the port to connect to
 */
conn_t * connect_ssl(char * ip, uint16_t port);

/**
 * Opens an SSL connection via an HTTP proxy.
 * @param proxyip the proxy address (IP or hostname)
 * @param proxyport the proxy port (e.g. 3128 or 8080)
 * @param ip the address (IP or hostname) to connect to
 * @param port the port to connect to
 */
conn_t * connect_ssl_proxy(char * proxyip, uint16_t proxyport, char * ip, uint16_t port);


/**
 * Closes an open connection.
 * @param conn connection
 */
void disconnect(conn_t * conn);

/**
 * Receives data from a connection.
 * @param conn connection
 * @param buf buffer to write received data into
 * @param bufsize maximum number of bytes to receive
 */
int conn_read(conn_t * conn, char * buf, size_t bufsize);

/**
 * Receives a line from a connection.
 * Receives as many bytes as fit into the data buffer, or until
 * '\n' is reached. In case '\n' is found, it is included in the
 * received string.
 * @param conn connection
 * @param buf data buffer to write into
 * @param bufsize size of data buffer
 */
int conn_readline(conn_t * conn, char * buf, size_t bufsize);

/**
 * Sends data to a connection.
 * @param conn connection
 * @param buf data buffer to send
 * @param bufsize size of data buffer
 */
int conn_write(conn_t * conn, char * buf, size_t bufsize);

#endif
