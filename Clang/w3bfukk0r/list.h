/*
 * (C)opyright 2006 Nico Golde <nico@ngolde.de>
 * (C)opyright 2006 Andreas Krennmair <ak@synflood.at>
 * See LICENSE file for license details
 */

#ifndef LIST_H
#define LIST_H

/** 
 * \struct word
 * \brief a word list element
 *
 * A word_t contains a word, and a pointer to the
 * next word in the list. If the pointer is <i>NULL</i>,
 * then the end of the list is reached.
 */
typedef struct word {
	char * word;		/**< the word */
	struct word * next;	/**< the pointer to the next element */
} word_t;

/**
 * \struct wordlist_t
 * \brief a word list containing word list elements
 *
 * A wordlist_t is a container for a linked list of word list
 * elements. It contains pointers to the beginning and the end
 * of the list, plus a counter that counts the number of elements
 * contained. The structure is kept as simple as possible, as
 * the only requirements are that elements are added to the end
 * of the list and that iterating over all elements of the list
 * should be as "cheap" as possible.
 */
typedef struct {
	word_t * top;			/**< the beginning of the list */
	word_t * last;			/**< the end of the list */
	unsigned long count;	/**< the element counter */
} wordlist_t;

/**
 * Creates a new word list.
 * @return the new wordlist structure, or NULL if allocation failed.
 */
wordlist_t * new_wordlist(void);

/**
 * Deletes the word list and all of its elements.
 * @param wl the word list to delete
 */
void delete_list(wordlist_t * wl);

/**
 * Appends a word to the word list.
 * @param list the word list
 * @param word the word to append
 */
void append_word(wordlist_t * list, char * word);

/**
 * Opens the specified file, and adds its contents to the specified
 * list, parsing each line as one word.
 * @param list the word list to be filled
 * @param filename the file from which the words shall be read
 */
void fill_wordlist_from_file(wordlist_t * list, char * filename);

/**
 * Returns the start element of the word list.
 * @return start element of word list
 */
word_t * get_top(wordlist_t * list);

#define FOREACH_WORD(list,wordname,block) \
	do { \
		word_t * e = list->top; char * wordname; \
		for (e=list->top;e;e=e->next) { wordname = e->word; \
		{ block } \
		} \
	} while (0)

#endif
