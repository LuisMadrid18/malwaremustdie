/*
 * (C)opyright 2006 Nico Golde <nico@ngolde.de>
 * (C)opyright 2006 Andreas Krennmair <ak@synflood.at>
 * See LICENSE file for license details
 */

#ifndef URL_H
#define URL_H

#include <stdint.h>
#include <sys/types.h>

#define HTTP_STRING "http://"
#define HTTPS_STRING "https://"

/**
 * \enum proto_t
 * \brief protocol constants
 *
 * This enumeration contains values for url_t::protocol
 * to specify the protocol.
 */
typedef enum { 
	PROTO_INVALID = -1,	/**< an invalid protocol */
	PROTO_HTTP = 0,		/**< the HTTP protocol */
	PROTO_HTTPS			/**< the HTTPS protocol, i.e. HTTP over SSL */
} proto_t;

/**
 * \struct url_t
 * \brief a URL structure
 *
 * This structure contains the result of the process
 * of parsing a URL from a string.
 */
typedef struct {
	proto_t protocol;	/**< the URL protocol, a value of proto_t */
	char *host;			/**< the host */
	uint16_t port;		/**< the port */
	char *resource;		/**< the resource, i.e. the path after the host and/or port */
} url_t;

/**
 * Parses the provided string as an URL, and returns the resulting
 * url_t structure. The format of a valid URL must be
 * &lt;proto&gt;://&lt;host&gt;[&lt;port&gt;][/&lt;resource&gt;]. If
 * no port can be found, the default port for <i>proto</i> is used,
 * i.e. 80 for <i>http</i> and 443 for <i>https</i>. If no resource
 * is found, it is simply set to <i>"/"</i>.
 * @param name the string to parse
 * @return the parsed URL, or NULL if parsing failed
 */
url_t * parse_url(char * name);

/**
 * Frees the URL structure and all of its members.
 * @param url the URL to free
 */
void free_url(url_t * url);

/**
 * Converts a URL to its textual representation.
 * @param str the target buffer into which the resulting string shall be written.
 * @param n the size of the target buffer
 * @param url the URL that shall be converted.
 */
void url_to_str(char * str, size_t n, url_t * url);


/**
 * Concatenates a complete URL and a word for use in the proxy handling code.
 * @param str the target buffer into which the resulting string shall be written.
 * @param n the size of the target buffer
 * @param nice_url the textual representation of the URL
 * @param resource the word to append
 */
void proxyresource(char * str, size_t n, char * nice_url, char * resource);

/**
 * Returns the port of a string in the format &lt;host&gt;:&lt;port&gt;, or a default value
 * if no port could be found.
 * @param argv the string to parse
 * @return the found port or 8080 if not port could be found
 */
uint16_t getport (char * argv);

#endif
