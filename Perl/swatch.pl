#!/usr/bin/perl
#
#    swatch: The Simple WATCHdog
#    Copyright (C) 1993-2006 E. Todd Atkins
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use strict;
use FileHandle;
use POSIX ":sys_wait_h";

## User supplied modules and their locations
use lib qw();


use Swatch::Actions;
use Swatch::Throttle;
use Swatch::Threshold;

use vars qw/
  %Msg_Rec
  $Fh
/;

$SIG{'TERM'} = $SIG{'HUP'} = 'goodbye';
$SIG{'CHLD'} = 'DEFAULT';

## Constants
(my $Me = $0) =~ s%.*/%%;
my $BELL   = "";
$/ = "
";
my $swatch_flush_interval = 300;
my $swatch_last_flush = time;

use IO::Handle;
STDOUT->autoflush(1);

sub goodbye {
  $| = 0;

  &Swatch::Actions::close_pipe_if_open();

  exit(0);
}

#
# write_pid_file(file_name) - writes a one line file that contains
# the current process id.
#
sub write_pid_file {
  my $name = shift;
  my $fh = new FileHandle "$name", "w";
 
  if (defined($fh)) {
    print $fh "$$\n";
    $fh->close;
  } else {
    warn "$Me: cannot write pid file named $name: $!\n";
  }
}
  print "\n*** swatch version 3.2.1 (pid:14326) started at " . `/bin/date` . "\n";
use File::Tail;
my $Filename = '/path/to/your/log';
my $File = File::Tail->new(name=>$Filename, tail=>1, maxinterval=>0.5, interval=>0.5);
if (not defined $File) {
    die "/usr/bin/swatch: cannot read input \"$Filename\": $!\n";
}

LOOP: while (defined($_=$File->read)) {

    chomp;
    my $S_ = $_;
    @_ = split;
    
    ### quote all special shell chars ###
    $S_ =~ s/([;&\(\)\|\^><\$`'\\])/\\$1/g;
    my @S_ = split(/\s+/, $S_);

    if (/Failed to scan object, scanning stopped with error!/) {
	&Swatch::Actions::send_email('SUBJECT' => "YourSubject", 'MESSAGE' => "$_", 'ADDRESSES' => "your\@email.address", );
      next;
    }

}
